
// based on ruby's Module class and Mozilla's Array generics:
//   http://www.ruby-doc.org/core/classes/Module.html
//   http://developer.mozilla.org/en/docs/New_in_JavaScript_1.6#Array_and_String_generics

// A Module is used as the basis for creating interfaces that can be
// applied to other classes. *All* properties and methods are static.
// When a module is used as a mixin, methods defined on what would normally be
// the instance interface become instance methods of the target object.

// Modules cannot be instantiated. Static properties and methods are inherited.

/*  -------
    EXAMPLE
    -------
  
  // create a module
  
  var Circle = Module.extend({
    // instance AND static
    
    getArea: function(circle) {
      return this.PI * Math.pow(circle.radius, 2);
    },
    
    getCircumference: function(circle) {
      return 2 * this.PI * circle.radius; 
    }
  }, {
    // static only
    
    PI: 3.14
  });
  
  // you cannot instantiate a module:
  
  var wheel = new Circle(50); // => ERROR!
  
  // apply the Circle interface to an object instead:
  
  var wheel = Circle({radius:50});
  
  // call getCircumference() like an instance method on the object:
  
  print(wheel.getCircumference()); //=> 314
  
  // call getCircumference() like a static method:
  
  print(Circle.getCircumference({radius:10})); //=> 62.8
  print(Circle.getCircumference(wheel));       //=> 314
  
  // Circle.PI is static only:
  
  print(Circle.PI); // => 3.14
  print(wheel.PI);  // => undefined
  
  // Apply the Circle interface to another class:
  
  var Wheel = CarPart.extend({
    constructor: function(radius) {
      this.base();
      this.radius = radius;
    }
  });
  Wheel.implement(Circle);  
  
  var wheel = new Wheel(10);
  print(wheel.getCircumference());       // => 62.8
  print(Circle.getCircumference(wheel)); // => 62.8

-------- */
